Index: src/server.c
===================================================================
--- src/server.c	(revision 1)
+++ src/server.c	(revision 12)
@@ -9,6 +9,8 @@
  * library functions declared in storage.h and implemented in storage.c.
  */
 
+// comment
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <unistd.h>
@@ -33,6 +35,7 @@
  * @param cmd The command received from the client.
  * @return Returns 0 on success, -1 otherwise.
  */
+//hello
 int handle_command(FILE *fp, int sock, char *cmd)
 {
 	char msg[50];
@@ -54,6 +57,7 @@
  * configuration file, starts listening on a port, and proccesses
  * commands from clients.
  */
+
 int main(int argc, char *argv[])
 {
 	char msg[50];
@@ -123,7 +127,7 @@
 		}
 		exit(EXIT_FAILURE);
 	}
-
+//more comment
 	// Bind it to the listening port.
 	struct sockaddr_in listenaddr;
 	memset(&listenaddr, 0, sizeof listenaddr);
Index: src/client.c
===================================================================
--- src/client.c	(revision 1)
+++ src/client.c	(revision 12)
@@ -6,6 +6,8 @@
  * and performs a number of storage_* operations. If there are errors,
  * the client exists.
  */
+//adding comment
+// hello!
 
 #include <errno.h>
 #include <stdio.h>
Index: src/utils.c
===================================================================
--- src/utils.c	(revision 1)
+++ src/utils.c	(revision 12)
@@ -14,6 +14,8 @@
 #include <unistd.h>
 #include "utils.h"
 
+
+
 int sendall(const int sock, const char *buf, const size_t len)
 {
 	size_t tosend = len;
@@ -58,6 +60,7 @@
 		}
 	}
 	*buf = 0; // add null terminator in case it's not already there.
+// return
 
 	return status;
 }
@@ -77,7 +80,7 @@
 	char value[MAX_CONFIG_LINE_LEN];
 	int items = sscanf(line, "%s %s\n", name, value);
 
-	// Line wasn't as expected.
+	// Line wasn't as expected. //hi
 	if (items != 2)
 		return -1;
 
